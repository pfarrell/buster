%div
  %svg.chart
%div
  %label#rate.analytic
%div
  %label#avg.analytic
%div
  %label#tot.analytic
:javascript
  $('.refresh').hide();
  var segments = 29;
  //var data = new Array(segments).join('0').split('');
  var data = new Array(segments).join('0').split('');
  var w = 5, h = 100;
  var msgs = 0
  var cnts = [];

  var stream = new EventSource('/tweet_stream');
  stream.addEventListener('message', function(event) {
    //if(queue.length > 10) queue.pop();
    msgs += 1;
    //queue.push(JSON.parse(event.data));
  }, false);
  

  stream.addEventListener('open', function(e) {
    console.log(e);
    // Connection was opened.
  }, false);

  stream.addEventListener('error', function(e) {
      console.log(e);
      if (e.readyState == EventSource.CLOSED) {
        // Connection was closed.
      }
  }, false);

  d3.select(".chart")
    .select("text")
      .append("text")
    .attr     
   
  var updates = 0;
  function getAvg(arr) {
    var ret = 0.0;
    for(var i=0; i<arr.length; i++ ) {
      ret += arr[i]/arr.length;
    }
    return Math.round(ret*10)/10;
  }
  function getTot(arr) {
    var ret = 0;
    for(var i=0; i<arr.length; i++ ) {
      ret += arr[i];
    }
    return ret;
  }
  function update() {
    //console.log(msgs);
    if(data.length > segments) data.shift();
    data.push([msgs, updates++]);
    cnts.push(msgs);
    document.getElementById("rate").innerHTML="curr: " + msgs + " msgs/sec";
    document.getElementById("avg").innerHTML=" avg: " + getAvg(cnts) + " msgs/sec";
    document.getElementById("tot").innerHTML=" tot: " + getTot(cnts) + " msgs";
    msgs = 0;


    var chart = d3.select(".chart")
        .attr("class", "axis")
        .attr("class", "chart")
        .attr("width", w * data.length)
        .attr("height", h)

    var x = d3.scale.linear()
        .domain([0, 1])
        .range([0, w]);
                 
    var y = d3.scale.linear()
        .domain([0, d3.max(data)[0]])
        .range([0, h]); //rangeRound is used for antialiasing

    var rect = chart.selectAll("rect")
        .data(data, function(d) { return d[1];});

    rect.attr("x", function(d, i) { return x(i) - .5; })
        .attr("y", function(d) { return h - y(d[0]) - .5; })
        .attr("width", w)
        .attr("height", function(d) { return y(d[0]); } );
        
    rect.enter().append("rect")
        .attr("x", function(d, i) { return x(i) - .5; })
        //.attr("y", function(d) { return h })
      //.transition()
        .attr("y", function(d) { return h - y(d[0]) - .5; })
        .attr("width", w)
        .attr("height", function(d) { return y(d[0]); } );

    rect.exit()
        .remove();

  }

  setInterval(function() {update();}, 1000);
